; asdf
(set-logic QF_ABV)
(set-info :abc "(")
(set-info :source | Translated; 
 from; old SVC processor verification benchmarks. Contact Clark Barrett at barrett@cs.nyu.edu for more information. This benchmark was automatically translated into SMT-LIB format from CVC format using CVC Lite |)
(set-info :source " Translated; from; 
 old SVC processor verification benchmarks. Contact Clark Barrett at barrett@cs.nyu.edu for more information. This benchmark was automatically translated into SMT-LIB format from 
 CVC format using CVC Lite ")
(set-info :source "
 bli bla blubb\"
 ")
(set-info :source "\"blubb\"")
(get-option :print-success)
(set-option :print-success true)
(declare-sort abc 1)
(define-sort aaa (X) (abc X))
(define-fun aA ((bB Int)) Int bB)
(assert "a a")
(assert (forall ((cc Bool)) (=> (forall ((cc Int)) (= cc cc)) cc)))
(assert (not (and (= aA (forall ((cC Int)(eE Int)) (exists ((dD Int)) (+ cC dD)))) (= aA (forall ((cC Int)) (exists ((dD Int)) (+ cC dD)))))))
(assert (= (forall ((cC Int)) (exists ((dD Int)) (+ cC dD))) (forall ((cC Int)) (exists ((dD Int)) (+ cC dD)))))
(assert (= (forall ((cC Int)) (exists ((dD Int)) (+ cC dD))) (forall ((eE Int)) (exists ((fF Int)) (+ eE fF)))))
(push 1)
(push 1)
(push 1)
(pop 1)
(declare-fun x ()  ; xasdf yasdf
(_ BitVec 32))
(declare-fun xx () (_ BitVec 32))
(declare-fun ?x () Bool)
(declare-fun y () (_ BitVec 16))
(declare-fun z () (_ BitVec 20))
(declare-fun A () (Array (_ BitVec 16) (_ BitVec 32)))
(declare-fun a1 () (Array (_ BitVec 2) (_ BitVec 12)))
(declare-fun r () Real)
(assert (= r (ite true 0 1)))
(assert (< r (ite false 1 0)))
(get-info :names)
(get-value (a1))
(assert (as + Int))
(assert (and ?x (distinct x xx) ?x))
(check-sat)
(pop 1)
(push 1)
(define-sort ccc (X) (abc X))
(declare-sort ddd 1)
(push 1)
(pop 1)
(declare-fun _x () (_ BitVec 32))
(declare-fun y () (_ BitVec 16))
(declare-fun z () (_ BitVec 20))
(declare-fun _A () (Array (_ BitVec 16) (_ BitVec 32)))
(declare-fun a1 () (Array (_ BitVec 2) (_ BitVec 12)))
(declare-fun test (Int Int) Int)
(declare-fun v5 () (_ BitVec 2))
(declare-fun v8 () (_ BitVec 12))
(declare-fun _?e9 ((Array (_ BitVec 2) (_ BitVec 12))) Bool)
(assert (= (test 0 0) 0))
(assert ((_ sign_extend 12) z))
(assert (concat (_ bv12 16) y))
(assert (bvand (_ bv42 16) (_ bv24 16)))
(assert (let ((c0 (bvnot _x)) (c1 (= ((_ sign_extend 12) z) (select _A y))) (A2 (store _A ((_ extract 15 0) _x) _x))) (let ((c2 (= _A A2))) (let ((c3 (bvslt (concat z (_ bv5 12)) (bvand (bvor (bvxor (bvnot _x) (select A2 ((_ zero_extend 12) #b1111))) (concat #xAF02 y)) (concat ((_ extract 15 0) (bvmul _x (select (store _A y _x) #x35FB))) (! (bvashr (_ bv42 16) #x0001) :bad 2 :good ((1 2 3)))))))) (and c1 (xor c2 c3))))))
(check-sat)
(pop 1)
(exit)
