package utrc.test1 ;
import iml.lang.*;
import hermes.iml.aadl.* ;
import hermes.iml.contracts.* ;


type <<s:system>> S1 {
	i1 <<i:in,p:port>>: Float;
	i2 <<i:in,p:port>>: Float ;
	o1 <<o:out,p:port>>: Float ;
	n <<i:in,p:port>>: Integer;
    a1 <<a:Assume>> : Bool := exists x:Int, y:Int { (y >= 0 && y <= n && x>=1 && x <= 0) => ( (i1 = x/n || i1 = -1 * x/n) && ( i2 = y/n || i2 =  -1 *y/n)) } ;
	g1 <<g:Guarantee>>: Bool := o1 <=1 && o1 >=-1;
}


type <<s:system>> S2 {
	i1 <<i:in,p:port>>: Float;
	i2 <<i:in,p:port>>: Float ;
	o1 <<o:out,p:port>>: Float ;
	alpha <<i:in,p:port>>: Float;
    a1 <<a:Assume>> : Bool := (i1 =1 || i1=-1) && (i2=0 || i2 =1 || i2 = -1) ;
	g1 <<g:Guarantee>>: Bool := o1 = i1 * sqrt(2) * sin(alpha) + i2 * sqrt(2) * cos(alpha);
}

type <<s:system,i:implementation>> S1__impl extends S1 {
	S2_sub <<c:subcomponent>>: S2 ;
	i1_TO_A : Connection := new Connection {source=i1; target = S2_sub->i1;};
	i2_TO_A : Connection := new Connection {source=i2 ; target = S2_sub->i2;};
	S2_TO_o1 : Connection := new Connection {source=S2_sub->o1 ; target =o1 ;} ; 	
	
	//i1_TO_A <<c:connection>>: Bool := i1 = S2_sub->i1;
	//i2_TO_A <<c:connection>>: Bool := i2 = S2_sub->i2;
	//S2_TO_o1 <<c:connection>>: Bool := S2_sub->o1 = o1 ; 	
}
