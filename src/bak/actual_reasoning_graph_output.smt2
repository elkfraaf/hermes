( graph test1 ( node entailment N_2 ) 
( node entailment N_1 ) 
( node done N_4 ) 
( node and N_3 ) 
( edge E_1 __ N_2.base ( smt25 ( ( declare-sort |utrc.test1.S2| 0 ) 
( declare-fun |utrc.test1.S2.i1| (   |utrc.test1.S2|  ) Real ) 
( declare-fun |utrc.test1.S2.i2| (   |utrc.test1.S2|  ) Real ) 
( declare-fun |utrc.test1.S2.o1| (   |utrc.test1.S2|  ) Real ) 
( declare-fun |utrc.test1.S2.alpha| (   |utrc.test1.S2|  ) Real ) 
( define-fun |utrc.test1.S2.a1| ( ( x!1 |utrc.test1.S2| ) ) |Bool| 
( and ( or ( = ( |utrc.test1.S2.i1| x!1 ) 1 ) 
( = ( |utrc.test1.S2.i1| x!1 ) 
( - 1 ) ) ) 
( or ( or ( = ( |utrc.test1.S2.i2| x!1 ) 0 ) 
( = ( |utrc.test1.S2.i2| x!1 ) 1 ) ) 
( = ( |utrc.test1.S2.i2| x!1 ) 
( - 1 ) ) ) ) ) 
( define-fun |utrc.test1.S2.g1| ( ( x!1 |utrc.test1.S2| ) ) |Bool| 
( = ( |utrc.test1.S2.o1| x!1 ) 
( + ( * ( * ( |utrc.test1.S2.i1| x!1 ) 
( pow 2.0 0.5 ) ) 
( |sin| ( |utrc.test1.S2.alpha| x!1 ) ) ) 
( * ( * ( |utrc.test1.S2.i2| x!1 ) 
( pow 2.0 0.5 ) ) 
( |cos| ( |utrc.test1.S2.alpha| x!1 ) ) ) ) ) ) 
( declare-sort |hermes.iml.aadl.Connection.T| 0 ) 
( declare-sort |utrc.test1.S1| 0 ) 
( declare-fun |utrc.test1.S1.i1| (   |utrc.test1.S1|  ) Real ) 
( declare-fun |utrc.test1.S1.i2| (   |utrc.test1.S1|  ) Real ) 
( declare-fun |utrc.test1.S1.o1| (   |utrc.test1.S1|  ) Real ) 
( declare-fun |utrc.test1.S1.n| (   |utrc.test1.S1|  ) Int ) 
( define-fun |utrc.test1.S1.a1| ( ( x!1 |utrc.test1.S1| ) ) |Bool| 
( and ( >= ( |utrc.test1.S1.n| x!1 ) 1 ) 
( exists ( ( x Int ) 
( y Int ) ) 
( and ( and ( and ( and ( >= |y| 1 ) 
( <= |y| ( |utrc.test1.S1.n| x!1 ) ) ) 
( >= |x| 1 ) ) 
( <= |x| 0 ) ) 
( and ( or ( = ( |utrc.test1.S1.i1| x!1 ) 
( to_real(/ |x| ( |utrc.test1.S1.n| x!1 )) ) ) 
( = ( |utrc.test1.S1.i1| x!1 ) 
( to_real(/ ( * ( - 1 ) |x| ) ( |utrc.test1.S1.n| x!1 ) ) ) ) )
( or ( = ( |utrc.test1.S1.i2| x!1 ) 
( to_real( / |y| ( |utrc.test1.S1.n| x!1 ) ) ) ) 
( = ( |utrc.test1.S1.i2| x!1 ) 
( to_real(/ ( * ( - 1 ) |y| ) ( |utrc.test1.S1.n| x!1 ) ) ) ) ) ) ) ) ) ) 
( define-fun |utrc.test1.S1.g1| ( ( x!1 |utrc.test1.S1| ) ) |Bool| 
( and ( <= ( |utrc.test1.S1.o1| x!1 ) 1 ) 
( >= ( |utrc.test1.S1.o1| x!1 ) 
( - 1 ) ) ) ) 
( declare-sort |hermes.iml.aadl.Connection<Float>| 0 ) 
( declare-fun |hermes.iml.aadl.Connection<Float>.source| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) 
( declare-fun |hermes.iml.aadl.Connection<Float>.target| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) 
( define-fun |hermes.iml.aadl.Connection<Float>.a1| ( ( x!1 |hermes.iml.aadl.Connection<Float>| ) ) |Bool| 
( = ( |hermes.iml.aadl.Connection<Float>.source| x!1 ) 
( |hermes.iml.aadl.Connection<Float>.target| x!1 ) ) ) 
( declare-sort |utrc.test1.S1__impl| 0 ) 
( declare-fun |utrc.test1.S1__impl.base_0| ( |utrc.test1.S1__impl| ) |utrc.test1.S1| ) 
( declare-fun |utrc.test1.S1__impl.S2_sub| (   |utrc.test1.S1__impl|  ) |utrc.test1.S2| ) 
( declare-fun |utrc.test1.S1__impl.i1_TO_A| (   |utrc.test1.S1__impl|  ) |hermes.iml.aadl.Connection<Float>| ) 
( define-fun |utrc.test1.S1__impl.i1_TO_A.init| ( ( x!1 |utrc.test1.S1__impl| ) ) Bool 
( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |utrc.test1.S1__impl.i1_TO_A| x!1 ) ) 
( |utrc.test1.S1.i1| ( |utrc.test1.S1__impl.base_0| x!1 ) ) ) 
( = ( |hermes.iml.aadl.Connection<Float>.target| ( |utrc.test1.S1__impl.i1_TO_A| x!1 ) ) 
( |utrc.test1.S2.i1| ( |utrc.test1.S1__impl.S2_sub| x!1 ) ) ) ) ) 
( declare-fun |utrc.test1.S1__impl.i2_TO_A| (   |utrc.test1.S1__impl|  ) |hermes.iml.aadl.Connection<Float>| ) 
( define-fun |utrc.test1.S1__impl.i2_TO_A.init| ( ( x!1 |utrc.test1.S1__impl| ) ) Bool 
( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |utrc.test1.S1__impl.i2_TO_A| x!1 ) ) 
( |utrc.test1.S1.i2| ( |utrc.test1.S1__impl.base_0| x!1 ) ) ) 
( = ( |hermes.iml.aadl.Connection<Float>.target| ( |utrc.test1.S1__impl.i2_TO_A| x!1 ) ) 
( |utrc.test1.S2.i2| ( |utrc.test1.S1__impl.S2_sub| x!1 ) ) ) ) ) 
( declare-fun |utrc.test1.S1__impl.S2_TO_o1| (   |utrc.test1.S1__impl|  ) |hermes.iml.aadl.Connection<Float>| ) 
( define-fun |utrc.test1.S1__impl.S2_TO_o1.init| ( ( x!1 |utrc.test1.S1__impl| ) ) Bool 
( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |utrc.test1.S1__impl.S2_TO_o1| x!1 ) ) 
( |utrc.test1.S2.o1| ( |utrc.test1.S1__impl.S2_sub| x!1 ) ) ) 
( = ( |hermes.iml.aadl.Connection<Float>.target| ( |utrc.test1.S1__impl.S2_TO_o1| x!1 ) ) 
( |utrc.test1.S1.o1| ( |utrc.test1.S1__impl.base_0| x!1 ) ) ) ) ) 
( declare-fun |utrc.test1.inst| ( ) |utrc.test1.S1__impl| ) 
( assert ( = ( |utrc.test1.S1__impl.i1_TO_A.init| |utrc.test1.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |utrc.test1.S1__impl.i1_TO_A| |utrc.test1.inst| ) ) true ) ) 
( assert ( = ( |utrc.test1.S1__impl.i2_TO_A.init| |utrc.test1.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |utrc.test1.S1__impl.i2_TO_A| |utrc.test1.inst| ) ) true ) ) 
( assert ( = ( |utrc.test1.S1__impl.S2_TO_o1.init| |utrc.test1.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |utrc.test1.S1__impl.S2_TO_o1| |utrc.test1.inst| ) ) true ) ) ) ) ) 
( edge E_6 __ N_2.kb ( smt25 ( ( |utrc.test1.S1.a1| |utrc.test1.inst| ) ) ) ) 
( edge E_7 __ N_2.g ( smt25 ( ( |utrc.test1.S2.a1| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) ) ) 
( edge E_8 N_2.valid N_3.in ( boolX ( __ ) ) ) 
( edge E_9 N_2.cmodel __ ( evaluate ( 
; ( get-value ( |utrc.test1.S1.i1| |utrc.test1.inst| ) ) 
; ( get-value ( |utrc.test1.S1.i2| |utrc.test1.inst| ) ) 
; ( get-value ( |utrc.test1.S1.o1| |utrc.test1.inst| ) ) 
; ( get-value ( |utrc.test1.S1.n| |utrc.test1.inst| ) ) 
( get-value ( |utrc.test1.S2.i1| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) 
( get-value ( |utrc.test1.S2.i2| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) 
( get-value ( |utrc.test1.S2.o1| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) 
( get-value ( |utrc.test1.S2.alpha| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) ) ) ) 
( edge E_1 __ N_2.base ( smt25 ( ( declare-sort |utrc.test1.S2| 0 ) 
( declare-fun |utrc.test1.S2.i1| (   |utrc.test1.S2|  ) Real ) 
( declare-fun |utrc.test1.S2.i2| (   |utrc.test1.S2|  ) Real ) 
( declare-fun |utrc.test1.S2.o1| (   |utrc.test1.S2|  ) Real ) 
( declare-fun |utrc.test1.S2.alpha| (   |utrc.test1.S2|  ) Real ) 
( define-fun |utrc.test1.S2.a1| ( ( x!1 |utrc.test1.S2| ) ) |Bool| 
( and ( or ( = ( |utrc.test1.S2.i1| x!1 ) 1 ) 
( = ( |utrc.test1.S2.i1| x!1 ) 
( - 1 ) ) ) 
( or ( or ( = ( |utrc.test1.S2.i2| x!1 ) 0 ) 
( = ( |utrc.test1.S2.i2| x!1 ) 1 ) ) 
( = ( |utrc.test1.S2.i2| x!1 ) 
( - 1 ) ) ) ) ) 
( define-fun |utrc.test1.S2.g1| ( ( x!1 |utrc.test1.S2| ) ) |Bool| 
( = ( |utrc.test1.S2.o1| x!1 ) 
( + ( * ( * ( |utrc.test1.S2.i1| x!1 ) 
( pow 2.0 0.5 ) ) 
( |sin| ( |utrc.test1.S2.alpha| x!1 ) ) ) 
( * ( * ( |utrc.test1.S2.i2| x!1 ) 
( pow 2.0 0.5 ) ) 
( |cos| ( |utrc.test1.S2.alpha| x!1 ) ) ) ) ) ) 
( declare-sort |hermes.iml.aadl.Connection.T| 0 ) 
( declare-sort |utrc.test1.S1| 0 ) 
( declare-fun |utrc.test1.S1.i1| (   |utrc.test1.S1|  ) Real ) 
( declare-fun |utrc.test1.S1.i2| (   |utrc.test1.S1|  ) Real ) 
( declare-fun |utrc.test1.S1.o1| (   |utrc.test1.S1|  ) Real ) 
( declare-fun |utrc.test1.S1.n| (   |utrc.test1.S1|  ) Int ) 
( define-fun |utrc.test1.S1.a1| ( ( x!1 |utrc.test1.S1| ) ) |Bool| 
( and ( >= ( |utrc.test1.S1.n| x!1 ) 1 ) 
( exists ( ( x Int ) 
( y Int ) ) 
( and ( and ( and ( and ( >= |y| 1 ) 
( <= |y| ( |utrc.test1.S1.n| x!1 ) ) ) 
( >= |x| 1 ) ) 
( <= |x| 0 ) ) 
( and ( or ( = ( |utrc.test1.S1.i1| x!1 ) 
( to_real(/ |x| ( |utrc.test1.S1.n| x!1 ) ) ) ) 
( = ( |utrc.test1.S1.i1| x!1 ) 
( to_real(/ ( * ( - 1 ) |x| ) ( |utrc.test1.S1.n| x!1 ) ) ) ) )
( or ( = ( |utrc.test1.S1.i2| x!1 ) 
( to_real(/ |y| ( |utrc.test1.S1.n| x!1 ) ) ) ) 
( = ( |utrc.test1.S1.i2| x!1 ) 
( to_real( / ( * ( - 1 ) |y| ) ( |utrc.test1.S1.n| x!1 ) ) ) ) ) ) ) ) ) )
( define-fun |utrc.test1.S1.g1| ( ( x!1 |utrc.test1.S1| ) ) |Bool| 
( and ( <= ( |utrc.test1.S1.o1| x!1 ) 1 ) 
( >= ( |utrc.test1.S1.o1| x!1 ) 
( - 1 ) ) ) ) 
( declare-sort |hermes.iml.aadl.Connection<Float>| 0 ) 
( declare-fun |hermes.iml.aadl.Connection<Float>.source| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) 
( declare-fun |hermes.iml.aadl.Connection<Float>.target| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) 
( define-fun |hermes.iml.aadl.Connection<Float>.a1| ( ( x!1 |hermes.iml.aadl.Connection<Float>| ) ) |Bool| 
( = ( |hermes.iml.aadl.Connection<Float>.source| x!1 ) 
( |hermes.iml.aadl.Connection<Float>.target| x!1 ) ) ) 
( declare-sort |utrc.test1.S1__impl| 0 ) 
( declare-fun |utrc.test1.S1__impl.base_0| ( |utrc.test1.S1__impl| ) |utrc.test1.S1| ) 
( declare-fun |utrc.test1.S1__impl.S2_sub| (   |utrc.test1.S1__impl|  ) |utrc.test1.S2| ) 
( declare-fun |utrc.test1.S1__impl.i1_TO_A| (   |utrc.test1.S1__impl|  ) |hermes.iml.aadl.Connection<Float>| ) 
( define-fun |utrc.test1.S1__impl.i1_TO_A.init| ( ( x!1 |utrc.test1.S1__impl| ) ) Bool 
( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |utrc.test1.S1__impl.i1_TO_A| x!1 ) ) 
( |utrc.test1.S1.i1| ( |utrc.test1.S1__impl.base_0| x!1 ) ) ) 
( = ( |hermes.iml.aadl.Connection<Float>.target| ( |utrc.test1.S1__impl.i1_TO_A| x!1 ) ) 
( |utrc.test1.S2.i1| ( |utrc.test1.S1__impl.S2_sub| x!1 ) ) ) ) ) 
( declare-fun |utrc.test1.S1__impl.i2_TO_A| (   |utrc.test1.S1__impl|  ) |hermes.iml.aadl.Connection<Float>| ) 
( define-fun |utrc.test1.S1__impl.i2_TO_A.init| ( ( x!1 |utrc.test1.S1__impl| ) ) Bool 
( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |utrc.test1.S1__impl.i2_TO_A| x!1 ) ) 
( |utrc.test1.S1.i2| ( |utrc.test1.S1__impl.base_0| x!1 ) ) ) 
( = ( |hermes.iml.aadl.Connection<Float>.target| ( |utrc.test1.S1__impl.i2_TO_A| x!1 ) ) 
( |utrc.test1.S2.i2| ( |utrc.test1.S1__impl.S2_sub| x!1 ) ) ) ) ) 
( declare-fun |utrc.test1.S1__impl.S2_TO_o1| (   |utrc.test1.S1__impl|  ) |hermes.iml.aadl.Connection<Float>| ) 
( define-fun |utrc.test1.S1__impl.S2_TO_o1.init| ( ( x!1 |utrc.test1.S1__impl| ) ) Bool 
( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |utrc.test1.S1__impl.S2_TO_o1| x!1 ) ) 
( |utrc.test1.S2.o1| ( |utrc.test1.S1__impl.S2_sub| x!1 ) ) ) 
( = ( |hermes.iml.aadl.Connection<Float>.target| ( |utrc.test1.S1__impl.S2_TO_o1| x!1 ) ) 
( |utrc.test1.S1.o1| ( |utrc.test1.S1__impl.base_0| x!1 ) ) ) ) ) 
( declare-fun |utrc.test1.inst| ( ) |utrc.test1.S1__impl| ) 
( assert ( = ( |utrc.test1.S1__impl.i1_TO_A.init| |utrc.test1.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |utrc.test1.S1__impl.i1_TO_A| |utrc.test1.inst| ) ) true ) ) 
( assert ( = ( |utrc.test1.S1__impl.i2_TO_A.init| |utrc.test1.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |utrc.test1.S1__impl.i2_TO_A| |utrc.test1.inst| ) ) true ) ) 
( assert ( = ( |utrc.test1.S1__impl.S2_TO_o1.init| |utrc.test1.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |utrc.test1.S1__impl.S2_TO_o1| |utrc.test1.inst| ) ) true ) ) ) ) ) 
( edge E_2 __ N_1.kb ( smt25 ( ( and ( |utrc.test1.S1.a1| |utrc.test1.inst| ) 
( => ( |utrc.test1.S2.a1| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) 
( |utrc.test1.S2.g1| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) ) ) ) ) 
( edge E_3 __ N_1.g ( smt25 ( ( |utrc.test1.S1.g1| |utrc.test1.inst| ) ) ) ) 
( edge E_4 N_1.valid N_3.in ( boolX ( __ ) ) ) 
( edge E_5 N_1.cmodel __ ( evaluate ( 
;( get-value ( |utrc.test1.S1.i1| |utrc.test1.inst| ) ) 
;( get-value ( |utrc.test1.S1.i2| |utrc.test1.inst| ) ) 
;( get-value ( |utrc.test1.S1.o1| |utrc.test1.inst| ) ) 
;( get-value ( |utrc.test1.S1.n| |utrc.test1.inst| ) ) 
( get-value ( |utrc.test1.S2.i1| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) 
( get-value ( |utrc.test1.S2.i2| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) 
( get-value ( |utrc.test1.S2.o1| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) 
( get-value ( |utrc.test1.S2.alpha| ( |utrc.test1.S1__impl.S2_sub| |utrc.test1.inst| ) ) ) ) ) ) 
( edge E_10 N_3.out N_4.in ( boolX ( __ ) ) ) 
( edge E_8 N_2.valid N_3.in ( boolX ( __ ) ) ) 
( edge E_4 N_1.valid N_3.in ( boolX ( __ ) ) ) 
( edge E_10 N_3.out N_4.in ( boolX ( __ ) ) ) )


