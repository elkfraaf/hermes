MODULE "UxASResponds_pkgC.GenericLastService" ( CmdRequest_in )
VAR CmdResponse_out : "iml.ports.EventDataPort< iml.lang.Bool >"  ;
VAR gmonitor : "UxASResponds_pkgC.responds_once" (CmdResponse_out.event,CmdRequest_in.event) ;

DEFINE g := ( gmonitor.holds ) ;

MODULE "iml.ports.FlowPoint" 
VAR upperBound : "iml.lang.Real"  ;
VAR lowerBound : "iml.lang.Real"  ;
VAR event : boolean  ;

MODULE "iml.ports.delay" 
DEFINE holds := TRUE ;

MODULE "iml.lang.Real" 
MODULE "UxASResponds_pkgC.GenericService" ( CmdRequest_in,  SubResponse_in )
VAR g1monitor : "UxASResponds_pkgC.responds_once" (SubRequest_out.event,CmdRequest_in.event) ;
VAR processing_path1 : "iml.ports.FlowPath"  ;
VAR CmdResponse_out : "iml.ports.EventDataPort< iml.lang.Bool >"  ;
VAR SubRequest_out : "iml.ports.EventDataPort< iml.lang.Bool >"  ;
VAR processing_path0 : "iml.ports.FlowPath"  ;
VAR g2monitor : "UxASResponds_pkgC.responds_once" (CmdResponse_out.event,SubResponse_in.event) ;
VAR d1 : "iml.ports.delay"  ;
VAR d2 : "iml.ports.delay"  ;

DEFINE g := ( g1monitor.holds  &  g2monitor.holds   &  d1.holds   &  d2.holds  ) ;

INVAR ( (  processing_path0.start.event =  CmdRequest_in.event   &   processing_path0.end.event =  SubRequest_out.event   ) )  ;
INVAR ( (  processing_path1.start.event =  SubResponse_in.event   &   processing_path1.end.event =  CmdResponse_out.event   ) )  ;

MODULE "iml.ports.EventDataPort< iml.lang.Bool >" 
VAR data : boolean  ;
VAR flowpoint : "iml.ports.FlowPoint"  ;
VAR event : boolean  ;

MODULE "UxASResponds_pkgC.UxAS_responds" ( AutomationRequest_in )
VAR AutomationResponse_out : "iml.ports.EventDataPort< iml.lang.Bool >"  ;
VAR d : "iml.ports.delay"  ;
VAR adelaymonitor : "UxASResponds_pkgC.one_request_at_a_time" (AutomationResponse_out.flowpoint.event,AutomationRequest_in.flowpoint.event) ;
VAR processing_path : "iml.ports.FlowPath"  ;
VAR gmonitor : "UxASResponds_pkgC.responds_once" (AutomationResponse_out.event,AutomationRequest_in.event) ;
VAR amonitor : "UxASResponds_pkgC.one_request_at_a_time" (AutomationResponse_out.event,AutomationRequest_in.event) ;

DEFINE a := ( amonitor.holds  &  adelaymonitor.holds  ) ;
DEFINE g := ( gmonitor.holds  &  d.holds  ) ;

INVAR ( (  processing_path.start.event =  AutomationRequest_in.event   &   processing_path.end.event =  AutomationResponse_out.event   ) )  ;

MODULE "UxASResponds_pkgC.responds_once" ( a,  b )
VAR s : {"UxASResponds_pkgC.RespondsState.s0","UxASResponds_pkgC.RespondsState.s1","UxASResponds_pkgC.RespondsState.s2"}  ;

DEFINE s_init := ( s=  "UxASResponds_pkgC.RespondsState.s0" ) ;
INIT s_init ;

DEFINE state_trans := ( next(s)=  case 
	s=  "UxASResponds_pkgC.RespondsState.s0"  &  b   &  !a  : "UxASResponds_pkgC.RespondsState.s1";
	s=  "UxASResponds_pkgC.RespondsState.s0"  &  a  : "UxASResponds_pkgC.RespondsState.s2";
	s=  "UxASResponds_pkgC.RespondsState.s1"  &  a  : "UxASResponds_pkgC.RespondsState.s0";
	TRUE : s;
esac
 ) ;
TRANS state_trans ;

DEFINE holds := ( s=  "UxASResponds_pkgC.RespondsState.s0"  |  s=  "UxASResponds_pkgC.RespondsState.s1"  ) ;

MODULE "UxASResponds_pkgC.UxAS_responds_dot_i" ( AutomationRequest_in )
VAR AutomationRequestValidator : "UxASResponds_pkgC.GenericService" (AutomationRequest_in,PlanBuilder.CmdResponse_out) ;
VAR AutomationResponse_out : "iml.ports.EventDataPort< iml.lang.Bool >"  ;
VAR d : "iml.ports.delay"  ;
VAR adelaymonitor : "UxASResponds_pkgC.one_request_at_a_time" (AutomationResponse_out.flowpoint.event,AutomationRequest_in.flowpoint.event) ;
VAR TaskServiceBase : "UxASResponds_pkgC.GenericService" (PlanBuilder.SubRequest_out,RouteAggregator.CmdResponse_out) ;
VAR processing_path : "iml.ports.FlowPath"  ;
VAR gmonitor : "UxASResponds_pkgC.responds_once" (AutomationResponse_out.event,AutomationRequest_in.event) ;
VAR Planner : "UxASResponds_pkgC.GenericLastService" (RouteAggregator.SubRequest_out) ;
VAR amonitor : "UxASResponds_pkgC.one_request_at_a_time" (AutomationResponse_out.event,AutomationRequest_in.event) ;
VAR RouteAggregator : "UxASResponds_pkgC.GenericService" (TaskServiceBase.SubRequest_out,Planner.CmdResponse_out) ;
VAR PlanBuilder : "UxASResponds_pkgC.GenericService" (AutomationRequestValidator.SubRequest_out,TaskServiceBase.CmdResponse_out) ;

DEFINE a := ( amonitor.holds  &  adelaymonitor.holds  ) ;
DEFINE g := ( gmonitor.holds  &  d.holds  ) ;

INVAR ( (  processing_path.start.event =  AutomationRequest_in.event   &   processing_path.end.event =  AutomationResponse_out.event   ) )  ;
INVAR  AutomationRequestValidator.CmdResponse_out.event =  AutomationResponse_out.event &   AutomationRequestValidator.CmdResponse_out.data =  AutomationResponse_out.data &   AutomationRequestValidator.CmdResponse_out.flowpoint.event =  AutomationResponse_out.flowpoint.event   ;

MODULE "UxASResponds_pkgC.one_request_at_a_time" ( a,  b )
VAR s : {"UxASResponds_pkgC.RespondsState.s0","UxASResponds_pkgC.RespondsState.s1","UxASResponds_pkgC.RespondsState.s2"}  ;

DEFINE s_init := (  s =  "UxASResponds_pkgC.RespondsState.s0"  ) ;
INIT s_init ;

DEFINE s_trans := ( next(s)=  case 
	s=  "UxASResponds_pkgC.RespondsState.s0"  &  b  : "UxASResponds_pkgC.RespondsState.s1";
	s=  "UxASResponds_pkgC.RespondsState.s1"  &  b  : "UxASResponds_pkgC.RespondsState.s2";
	s=  "UxASResponds_pkgC.RespondsState.s1"  &  a   &  !b  : "UxASResponds_pkgC.RespondsState.s0";
	TRUE : s;
esac
 ) ;
TRANS s_trans ;

DEFINE holds := ( s=  "UxASResponds_pkgC.RespondsState.s0"  |  s=  "UxASResponds_pkgC.RespondsState.s1"  ) ;

MODULE "iml.ports.FlowPath" 
VAR upperBound : "iml.lang.Real"  ;
VAR start : "iml.ports.FlowPoint"  ;
VAR end : "iml.ports.FlowPoint"  ;
VAR lowerBound : "iml.lang.Real"  ;

MODULE "iml.ports.Port" 


MODULE main 
VAR inst : "UxASResponds_pkgC.UxAS_responds_dot_i" (AutomationRequest_in) ;
VAR AutomationRequest_in : "iml.ports.EventDataPort< iml.lang.Bool >"  ;


LTLSPEC !G(inst.a  &  ( TRUE  ->  inst.AutomationRequestValidator.g  )   &  ( TRUE  ->  inst.PlanBuilder.g  )   &  ( TRUE  ->  inst.TaskServiceBase.g  )   &  ( TRUE  ->  inst.RouteAggregator.g  )   &  ( TRUE  ->  inst.Planner.g  ) ) | G(inst.g) ; 