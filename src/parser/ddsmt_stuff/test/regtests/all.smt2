(set-logic ALL)
(declare-fun a () (Array (_ BitVec 1) (_ BitVec 1)))
(declare-fun b () (Array (_ BitVec 1) (_ BitVec 1)))
(declare-fun X () (_ BitVec 2))
(declare-fun Y () (_ BitVec 2))
(define-fun s ((i (_ BitVec 1)) (c_in (_ BitVec 1))) (_ BitVec 1)
  (let ((x (select a i)) (y (select b i)))
    (let ((t1 (bvand (bvand x y) c_in))
          (t2 (bvand (bvand (bvnot x) (bvnot y)) c_in))
          (t3 (bvand (bvand (bvnot x) y) (bvnot c_in)))
          (t4 (bvand (bvand x (bvnot y)) (bvnot c_in))))
      (bvor (bvor (bvor t1 t2) t3) t4))))
(define-fun c_out ((i (_ BitVec 1)) (c_in (_ BitVec 1))) (_ BitVec 1)
  (let ((x (select a i)) (y (select b i)))
    (bvor (bvor (bvand x y) (bvand x c_in)) (bvand y c_in))))
(assert (= X (concat (select a (_ bv0 1)) (select a (_ bv1 1)))))
(assert (= Y (concat (select b (_ bv0 1)) (select b (_ bv1 1)))))
(assert
(let ((i1 (_ bv1 1)) (c_in1 (_ bv0 1)))
(let ((s1 (s i1 c_in1)))
(let ((i0 (_ bv0 1)) (c_in0 (c_out i1 c_in1)))
(let ((s0 (s i0 c_in0)))
(let ((sum (concat s0 s1)))
(not (= sum (bvadd X Y)))
))))))
(check-sat)
(exit)

