( graph test1 ( node entailment N_2 ) ( node entailment N_1 ) ( node and N_4 ) ( node entailment N_3 ) ( node done N_5 ) ( edge E_6 __ N_2.base ( smt25 ( ( declare-sort |test2.S1_Impl| 0 ) ( declare-sort |test2.S3| 0 ) ( declare-sort |test2.S2| 0 ) ( declare-sort |test2.S1| 0 ) ( declare-sort |hermes.iml.aadl.Connection.T| 0 ) ( declare-sort |hermes.iml.aadl.Connection<Float>| 0 ) ( declare-fun |test2.inst| ( ) |test2.S1_Impl| ) ( declare-fun |test2.S1_Impl.base_0| ( |test2.S1_Impl| ) |test2.S1| ) ( declare-fun |test2.S1_Impl.S2_sub| (   |test2.S1_Impl|  ) |test2.S2| ) ( declare-fun |test2.S1_Impl.S3_sub| (   |test2.S1_Impl|  ) |test2.S3| ) ( declare-fun |test2.S1_Impl.i1_TO_A| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.i2_TO_A| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.S2_TO_o1| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.S2_TO_S3| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S3.i1| (   |test2.S3|  ) Real ) ( declare-fun |test2.S3.o1| (   |test2.S3|  ) Real ) ( declare-fun |test2.S2.i1| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.i2| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.o1| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.alpha| (   |test2.S2|  ) Real ) ( declare-fun |test2.S1.i1| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.i2| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.o1| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.n| (   |test2.S1|  ) |Int| ) ( declare-fun |hermes.iml.aadl.Connection<Float>.source| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) ( declare-fun |hermes.iml.aadl.Connection<Float>.target| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) ( define-fun |test2.S1_Impl.i1_TO_A.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.i1_TO_A| x!1 ) ) ( |test2.S1.i1| ( |test2.S1_Impl.base_0| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.i1_TO_A| x!1 ) ) ( |test2.S2.i1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.i2_TO_A.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.i2_TO_A| x!1 ) ) ( |test2.S1.i2| ( |test2.S1_Impl.base_0| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.i2_TO_A| x!1 ) ) ( |test2.S2.i2| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.S2_TO_o1.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.S2_TO_o1| x!1 ) ) ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.S2_TO_o1| x!1 ) ) ( |test2.S1.o1| ( |test2.S1_Impl.base_0| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.S2_TO_S3.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.S2_TO_S3| x!1 ) ) ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.S2_TO_S3| x!1 ) ) ( |test2.S3.i1| ( |test2.S1_Impl.S3_sub| x!1 ) ) ) ) ) ( define-fun |test2.S3.a1| ( ( x!1 |test2.S3| ) ) |Bool| ( and ( <= ( |test2.S3.i1| x!1 ) 1 ) ( >= ( |test2.S3.i1| x!1 ) ( - 1 ) ) ) ) ( define-fun |test2.S3.g1| ( ( x!1 |test2.S3| ) ) |Bool| ( = ( |test2.S3.o1| x!1 ) ( |test2.S3.i1| x!1 ) ) ) ( define-fun |test2.S2.a1| ( ( x!1 |test2.S2| ) ) |Bool| ( and ( or ( = ( |test2.S2.i1| x!1 ) 1 ) ( = ( |test2.S2.i1| x!1 ) ( - 1 ) ) ) ( or ( or ( = ( |test2.S2.i2| x!1 ) 0 ) ( = ( |test2.S2.i2| x!1 ) 1 ) ) ( = ( |test2.S2.i2| x!1 ) ( - 1 ) ) ) ) ) ( define-fun |test2.S2.g1| ( ( x!1 |test2.S2| ) ) |Bool| ( = ( |test2.S2.o1| x!1 ) ( + ( * ( * ( |test2.S2.i1| x!1 ) 0.5 ) ( |sin| ( |test2.S2.alpha| x!1 ) ) ) ( * ( * ( |test2.S2.i2| x!1 ) 0.5 ) ( |cos| ( |test2.S2.alpha| x!1 ) ) ) ) ) ) ( define-fun |test2.S1.a1| ( ( x!1 |test2.S1| ) ) |Bool| ( and ( >= ( |test2.S1.n| x!1 ) 1 ) ( exists ( ( x Int ) ( y Int ) ) ( and ( and ( and ( and ( >= |y| 0 ) ( <= |y| ( |test2.S1.n| x!1 ) ) ) ( >= |x| 1 ) ) ( <= |x| ( |test2.S1.n| x!1 ) ) ) ( and ( or ( = ( |test2.S1.i1| x!1 ) ( / ( to_real |x| ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ( = ( |test2.S1.i1| x!1 ) ( / ( to_real ( * ( - 1 ) |x| ) ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ) ( or ( = ( |test2.S1.i2| x!1 ) ( / ( to_real |y| ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ( = ( |test2.S1.i2| x!1 ) ( / ( to_real ( * ( - 1 ) |y| ) ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ) ) ) ) ) ) ( define-fun |test2.S1.g1| ( ( x!1 |test2.S1| ) ) |Bool| ( and ( <= ( |test2.S1.o1| x!1 ) 1 ) ( >= ( |test2.S1.o1| x!1 ) ( - 1 ) ) ) ) ( define-fun |hermes.iml.aadl.Connection<Float>.a1| ( ( x!1 |hermes.iml.aadl.Connection<Float>| ) ) |Bool| ( = ( |hermes.iml.aadl.Connection<Float>.source| x!1 ) ( |hermes.iml.aadl.Connection<Float>.target| x!1 ) ) ) ( assert ( = ( |test2.S1_Impl.i1_TO_A.init| |test2.inst| ) true ) ) ( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.i1_TO_A| |test2.inst| ) ) true ) ) ( assert ( = ( |test2.S1_Impl.i2_TO_A.init| |test2.inst| ) true ) ) ( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.i2_TO_A| |test2.inst| ) ) true ) ) ( assert ( = ( |test2.S1_Impl.S2_TO_o1.init| |test2.inst| ) true ) ) ( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.S2_TO_o1| |test2.inst| ) ) true ) ) ( assert ( = ( |test2.S1_Impl.S2_TO_S3.init| |test2.inst| ) true ) ) ( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.S2_TO_S3| |test2.inst| ) ) true ) ) ) ) ) ( edge E_7 __ N_2.kb ( smt25 ( ( and ( |test2.S1.a1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ( => ( |test2.S3.a1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ( |test2.S3.g1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) ) ) ) ( edge E_8 __ N_2.g ( smt25 ( ( |test2.S2.a1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ) ( edge E_9 N_2.valid N_4.in ( boolX ( __ ) ) ) ( edge E_10 N_2.cmodel __ ( evaluate ( ( get-value ( ( |test2.S1.i1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ( get-value ( ( |test2.S1.i2|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ( get-value ( ( |test2.S1.o1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ( get-value ( ( |test2.S1.n|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ( get-value ( ( |test2.S2.i1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S2.i2| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S2.alpha| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S3.i1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S3.o1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) ) ) ) ( edge E_1 __ N_1.base ( smt25 ( ( declare-sort |test2.S1_Impl| 0 ) ( declare-sort |test2.S3| 0 ) ( declare-sort |test2.S2| 0 ) ( declare-sort |test2.S1| 0 ) ( declare-sort |hermes.iml.aadl.Connection.T| 0 ) ( declare-sort |hermes.iml.aadl.Connection<Float>| 0 ) ( declare-fun |test2.inst| ( ) |test2.S1_Impl| ) ( declare-fun |test2.S1_Impl.base_0| ( |test2.S1_Impl| ) |test2.S1| ) ( declare-fun |test2.S1_Impl.S2_sub| (   |test2.S1_Impl|  ) |test2.S2| ) ( declare-fun |test2.S1_Impl.S3_sub| (   |test2.S1_Impl|  ) |test2.S3| ) ( declare-fun |test2.S1_Impl.i1_TO_A| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.i2_TO_A| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.S2_TO_o1| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.S2_TO_S3| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S3.i1| (   |test2.S3|  ) Real ) ( declare-fun |test2.S3.o1| (   |test2.S3|  ) Real ) ( declare-fun |test2.S2.i1| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.i2| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.o1| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.alpha| (   |test2.S2|  ) Real ) ( declare-fun |test2.S1.i1| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.i2| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.o1| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.n| (   |test2.S1|  ) |Int| ) ( declare-fun |hermes.iml.aadl.Connection<Float>.source| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) ( declare-fun |hermes.iml.aadl.Connection<Float>.target| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) ( define-fun |test2.S1_Impl.i1_TO_A.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.i1_TO_A| x!1 ) ) ( |test2.S1.i1| ( |test2.S1_Impl.base_0| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.i1_TO_A| x!1 ) ) ( |test2.S2.i1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.i2_TO_A.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.i2_TO_A| x!1 ) ) ( |test2.S1.i2| ( |test2.S1_Impl.base_0| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.i2_TO_A| x!1 ) ) ( |test2.S2.i2| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.S2_TO_o1.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.S2_TO_o1| x!1 ) ) ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.S2_TO_o1| x!1 ) ) ( |test2.S1.o1| ( |test2.S1_Impl.base_0| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.S2_TO_S3.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.S2_TO_S3| x!1 ) ) ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.S2_TO_S3| x!1 ) ) ( |test2.S3.i1| ( |test2.S1_Impl.S3_sub| x!1 ) ) ) ) ) ( define-fun |test2.S3.a1| ( ( x!1 |test2.S3| ) ) |Bool| ( and ( <= ( |test2.S3.i1| x!1 ) 1 ) ( >= ( |test2.S3.i1| x!1 ) ( - 1 ) ) ) ) ( define-fun |test2.S3.g1| ( ( x!1 |test2.S3| ) ) |Bool| ( = ( |test2.S3.o1| x!1 ) ( |test2.S3.i1| x!1 ) ) ) ( define-fun |test2.S2.a1| ( ( x!1 |test2.S2| ) ) |Bool| ( and ( or ( = ( |test2.S2.i1| x!1 ) 1 ) ( = ( |test2.S2.i1| x!1 ) ( - 1 ) ) ) ( or ( or ( = ( |test2.S2.i2| x!1 ) 0 ) ( = ( |test2.S2.i2| x!1 ) 1 ) ) ( = ( |test2.S2.i2| x!1 ) ( - 1 ) ) ) ) ) ( define-fun |test2.S2.g1| ( ( x!1 |test2.S2| ) ) |Bool| ( = ( |test2.S2.o1| x!1 ) ( + ( * ( * ( |test2.S2.i1| x!1 ) 0.5 ) ( |sin| ( |test2.S2.alpha| x!1 ) ) ) ( * ( * ( |test2.S2.i2| x!1 ) 0.5 ) ( |cos| ( |test2.S2.alpha| x!1 ) ) ) ) ) ) ( define-fun |test2.S1.a1| ( ( x!1 |test2.S1| ) ) |Bool| ( and ( >= ( |test2.S1.n| x!1 ) 1 ) ( exists ( ( x Int ) ( y Int ) ) ( and ( and ( and ( and ( >= |y| 0 ) ( <= |y| ( |test2.S1.n| x!1 ) ) ) ( >= |x| 1 ) ) ( <= |x| ( |test2.S1.n| x!1 ) ) ) ( and ( or ( = ( |test2.S1.i1| x!1 ) ( / ( to_real |x| ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ( = ( |test2.S1.i1| x!1 ) ( / ( to_real ( * ( - 1 ) |x| ) ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ) ( or ( = ( |test2.S1.i2| x!1 ) ( / ( to_real |y| ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ( = ( |test2.S1.i2| x!1 ) ( / ( to_real ( * ( - 1 ) |y| ) ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ) ) ) ) ) ) ( define-fun |test2.S1.g1| ( ( x!1 |test2.S1| ) ) |Bool| ( and ( <= ( |test2.S1.o1| x!1 ) 1 ) ( >= ( |test2.S1.o1| x!1 ) ( - 1 ) ) ) ) ( define-fun |hermes.iml.aadl.Connection<Float>.a1| ( ( x!1 |hermes.iml.aadl.Connection<Float>| ) ) |Bool| ( = ( |hermes.iml.aadl.Connection<Float>.source| x!1 ) ( |hermes.iml.aadl.Connection<Float>.target| x!1 ) ) ) ( assert ( = ( |test2.S1_Impl.i1_TO_A.init| |test2.inst| ) true ) ) ( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.i1_TO_A| |test2.inst| ) ) true ) ) ( assert ( = ( |test2.S1_Impl.i2_TO_A.init| |test2.inst| ) true ) ) ( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.i2_TO_A| |test2.inst| ) ) true ) ) ( assert ( = ( |test2.S1_Impl.S2_TO_o1.init| |test2.inst| ) true ) ) ( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.S2_TO_o1| |test2.inst| ) ) true ) ) ( assert ( = ( |test2.S1_Impl.S2_TO_S3.init| |test2.inst| ) true ) ) ( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.S2_TO_S3| |test2.inst| ) ) true ) ) ) ) ) ( edge E_2 __ N_1.kb ( smt25 ( ( and ( and ( |test2.S1.a1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ( => ( |test2.S2.a1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ( |test2.S2.g1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( => ( |test2.S3.a1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ( |test2.S3.g1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) ) ) ) ( edge E_3 __ N_1.g ( smt25 ( ( |test2.S1.g1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ) ( edge E_4 N_1.valid N_4.in ( boolX ( __ ) ) ) ( edge E_5 N_1.cmodel __ ( evaluate ( ( get-value ( ( |test2.S1.i1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ( get-value ( ( |test2.S1.i2|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ( get-value ( ( |test2.S1.o1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ( get-value ( ( |test2.S1.n|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) ( get-value ( ( |test2.S2.i1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S2.i2| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S2.alpha| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S3.i1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) ( get-value ( ( |test2.S3.o1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) ) ) ) ( edge E_14 N_3.valid N_4.in ( boolX ( __ ) ) ) ( edge E_16 N_4.out N_5.in ( boolX ( __ ) ) ) 
( edge E_11 __ N_3.base 


( smt25 ( ( declare-sort |test2.S1_Impl| 0 ) ( declare-sort |test2.S3| 0 ) ( declare-sort |test2.S2| 0 ) ( declare-sort |test2.S1| 0 ) ( declare-sort |hermes.iml.aadl.Connection.T| 0 ) ( declare-sort |hermes.iml.aadl.Connection<Float>| 0 ) ( declare-fun |test2.inst| ( ) |test2.S1_Impl| ) ( declare-fun |test2.S1_Impl.base_0| ( |test2.S1_Impl| ) |test2.S1| ) ( declare-fun |test2.S1_Impl.S2_sub| (   |test2.S1_Impl|  ) |test2.S2| ) ( declare-fun |test2.S1_Impl.S3_sub| (   |test2.S1_Impl|  ) |test2.S3| ) ( declare-fun |test2.S1_Impl.i1_TO_A| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.i2_TO_A| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.S2_TO_o1| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S1_Impl.S2_TO_S3| (   |test2.S1_Impl|  ) |hermes.iml.aadl.Connection<Float>| ) ( declare-fun |test2.S3.i1| (   |test2.S3|  ) Real ) ( declare-fun |test2.S3.o1| (   |test2.S3|  ) Real ) ( declare-fun |test2.S2.i1| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.i2| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.o1| (   |test2.S2|  ) Real ) ( declare-fun |test2.S2.alpha| (   |test2.S2|  ) Real ) ( declare-fun |test2.S1.i1| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.i2| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.o1| (   |test2.S1|  ) Real ) ( declare-fun |test2.S1.n| (   |test2.S1|  ) |Int| ) ( declare-fun |hermes.iml.aadl.Connection<Float>.source| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) ( declare-fun |hermes.iml.aadl.Connection<Float>.target| (   |hermes.iml.aadl.Connection<Float>|  ) Real ) ( define-fun |test2.S1_Impl.i1_TO_A.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.i1_TO_A| x!1 ) ) ( |test2.S1.i1| ( |test2.S1_Impl.base_0| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.i1_TO_A| x!1 ) ) ( |test2.S2.i1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.i2_TO_A.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.i2_TO_A| x!1 ) ) ( |test2.S1.i2| ( |test2.S1_Impl.base_0| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.i2_TO_A| x!1 ) ) ( |test2.S2.i2| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.S2_TO_o1.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.S2_TO_o1| x!1 ) ) ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.S2_TO_o1| x!1 ) ) ( |test2.S1.o1| ( |test2.S1_Impl.base_0| x!1 ) ) ) ) ) ( define-fun |test2.S1_Impl.S2_TO_S3.init| ( ( x!1 |test2.S1_Impl| ) ) Bool ( and ( = ( |hermes.iml.aadl.Connection<Float>.source| ( |test2.S1_Impl.S2_TO_S3| x!1 ) ) ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| x!1 ) ) ) ( = ( |hermes.iml.aadl.Connection<Float>.target| ( |test2.S1_Impl.S2_TO_S3| x!1 ) ) ( |test2.S3.i1| ( |test2.S1_Impl.S3_sub| x!1 ) ) ) ) ) ( define-fun |test2.S3.a1| ( ( x!1 |test2.S3| ) ) |Bool| ( and ( <= ( |test2.S3.i1| x!1 ) 1 ) ( >= ( |test2.S3.i1| x!1 ) ( - 1 ) ) ) ) ( define-fun |test2.S3.g1| ( ( x!1 |test2.S3| ) ) |Bool| ( = ( |test2.S3.o1| x!1 ) ( |test2.S3.i1| x!1 ) ) ) ( define-fun |test2.S2.a1| ( ( x!1 |test2.S2| ) ) |Bool| ( and ( or ( = ( |test2.S2.i1| x!1 ) 1 ) ( = ( |test2.S2.i1| x!1 ) ( - 1 ) ) ) ( or ( or ( = ( |test2.S2.i2| x!1 ) 0 ) ( = ( |test2.S2.i2| x!1 ) 1 ) ) ( = ( |test2.S2.i2| x!1 ) ( - 1 ) ) ) ) ) ( define-fun |test2.S2.g1| ( ( x!1 |test2.S2| ) ) |Bool| ( = ( |test2.S2.o1| x!1 ) ( + ( * ( * ( |test2.S2.i1| x!1 ) 0.5 ) ( |sin| ( |test2.S2.alpha| x!1 ) ) ) ( * ( * ( |test2.S2.i2| x!1 ) 0.5 ) ( |cos| ( |test2.S2.alpha| x!1 ) ) ) ) ) ) ( define-fun |test2.S1.a1| ( ( x!1 |test2.S1| ) ) |Bool| ( and ( >= ( |test2.S1.n| x!1 ) 1 ) ( exists ( ( x Int ) ( y Int ) ) ( and ( and ( and ( and ( >= |y| 0 ) ( <= |y| ( |test2.S1.n| x!1 ) ) ) ( >= |x| 1 ) ) ( <= |x| ( |test2.S1.n| x!1 ) ) ) ( and ( or ( = ( |test2.S1.i1| x!1 ) ( / ( to_real |x| ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ( = ( |test2.S1.i1| x!1 ) ( / ( to_real ( * ( - 1 ) |x| ) ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ) ( or ( = ( |test2.S1.i2| x!1 ) ( / ( to_real |y| ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ( = ( |test2.S1.i2| x!1 ) ( / ( to_real ( * ( - 1 ) |y| ) ) ( to_real ( |test2.S1.n| x!1 ) ) ) ) ) ) ) ) ) ) ( define-fun |test2.S1.g1| ( ( x!1 |test2.S1| ) ) |Bool| ( and ( <= ( |test2.S1.o1| x!1 ) 1 ) ( >= ( |test2.S1.o1| x!1 ) ( - 1 ) ) ) ) ( define-fun |hermes.iml.aadl.Connection<Float>.a1| ( ( x!1 |hermes.iml.aadl.Connection<Float>| ) ) |Bool| ( = ( |hermes.iml.aadl.Connection<Float>.source| x!1 ) ( |hermes.iml.aadl.Connection<Float>.target| x!1 ) ) ) 
( assert ( = ( |test2.S1_Impl.i1_TO_A.init| |test2.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.i1_TO_A| |test2.inst| ) ) true ) ) 
( assert ( = ( |test2.S1_Impl.i2_TO_A.init| |test2.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.i2_TO_A| |test2.inst| ) ) true ) ) 
( assert ( = ( |test2.S1_Impl.S2_TO_o1.init| |test2.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.S2_TO_o1| |test2.inst| ) ) true ) ) 
( assert ( = ( |test2.S1_Impl.S2_TO_S3.init| |test2.inst| ) true ) ) 
( assert ( = ( |hermes.iml.aadl.Connection<Float>.a1| ( |test2.S1_Impl.S2_TO_S3| |test2.inst| ) ) true ) ) ) ) ) 
( edge E_12 __ N_3.kb ( smt25 ( ( and ( |test2.S1.a1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ( => ( |test2.S2.a1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ( |test2.S2.g1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) ) ) ) 
( edge E_13 __ N_3.g ( smt25 ( ( |test2.S3.a1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) ) 


( edge E_15 N_3.cmodel __ 
( evaluate ( 
( get-value ( ( |test2.S1.i1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) 
( get-value ( ( |test2.S1.i2|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) 
( get-value ( ( |test2.S1.o1|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) 
( get-value ( ( |test2.S1.n|  ( |test2.S1_Impl.base_0| |test2.inst| )  ) ) ) 
( get-value ( ( |test2.S2.i1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) 
( get-value ( ( |test2.S2.i2| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) 
( get-value ( ( |test2.S2.o1| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) 
( get-value ( ( |test2.S2.alpha| ( |test2.S1_Impl.S2_sub| |test2.inst| ) ) ) ) 
( get-value ( ( |test2.S3.i1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) 
( get-value ( ( |test2.S3.o1| ( |test2.S1_Impl.S3_sub| |test2.inst| ) ) ) ) ) ) ) )
